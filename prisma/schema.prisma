// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Example {
    id Int @id @default(autoincrement())
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refresh_token")
    access_token      String? @map("access_token")
    expires_at        Int?    @map("expires_at")
    token_type        String? @map("token_type")
    scope             String?
    id_token          String?
    session_state     String? @map("session_state")
    oauthTokenSecret  String? @map("oauth_token_secret")
    oauthToken        String? @map("oauth_token")
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Expense       Expense[]
}

model Expense {
    id          Int      @id @default(autoincrement())
    userId      Int
    amount      Int
    category    String?
    description String?
    createdAt   DateTime
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
